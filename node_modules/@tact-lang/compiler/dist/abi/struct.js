"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructFunctions = void 0;
const ops_1 = require("../generator/writers/ops");
const writeExpression_1 = require("../generator/writers/writeExpression");
const errors_1 = require("../errors");
const resolveDescriptors_1 = require("../types/resolveDescriptors");
exports.StructFunctions = new Map([
    [
        "toCell",
        {
            name: "toCell",
            resolve: (ctx, args, ref) => {
                if (args.length !== 1) {
                    (0, errors_1.throwCompilationError)("toCell() expects no arguments", ref);
                }
                if (args[0].kind !== "ref") {
                    (0, errors_1.throwCompilationError)("toCell() is implemented only a struct type", ref);
                }
                const tp = (0, resolveDescriptors_1.getType)(ctx, args[0].name);
                if (tp.kind !== "struct") {
                    (0, errors_1.throwCompilationError)("toCell() is implemented only a struct type", ref);
                }
                return { kind: "ref", name: "Cell", optional: false };
            },
            generate: (ctx, args, resolved, ref) => {
                if (resolved.length !== 1) {
                    (0, errors_1.throwCompilationError)("toCell() expects no arguments", ref);
                }
                if (args[0].kind !== "ref") {
                    (0, errors_1.throwCompilationError)("toCell() is implemented only a struct type", ref);
                }
                return `${ops_1.ops.writerCell(args[0].name, ctx)}(${resolved.map((v) => (0, writeExpression_1.writeExpression)(v, ctx)).join(", ")})`;
            },
        },
    ],
    [
        "fromCell",
        {
            name: "fromCell",
            resolve: (ctx, args, ref) => {
                if (args.length !== 2) {
                    (0, errors_1.throwCompilationError)("fromCell() expects one argument", ref);
                }
                if (args[0].kind !== "ref") {
                    (0, errors_1.throwCompilationError)("fromCell() is implemented only for struct types", ref);
                }
                const tp = (0, resolveDescriptors_1.getType)(ctx, args[0].name);
                if (tp.kind !== "struct") {
                    (0, errors_1.throwCompilationError)("fromCell() is implemented only for struct types", ref);
                }
                if (args[1].kind !== "ref" || args[1].name !== "Cell") {
                    (0, errors_1.throwCompilationError)("fromCell() expects a Cell as an argument", ref);
                }
                return { kind: "ref", name: args[0].name, optional: false };
            },
            generate: (ctx, args, resolved, ref) => {
                if (resolved.length !== 2) {
                    (0, errors_1.throwCompilationError)("fromCell() expects one argument", ref);
                }
                if (args[0].kind !== "ref") {
                    (0, errors_1.throwCompilationError)("fromCell() is implemented only for struct types", ref);
                }
                if (args[1].kind !== "ref" || args[1].name !== "Cell") {
                    (0, errors_1.throwCompilationError)("fromCell() expects a Cell as an argument", ref);
                }
                return `${ops_1.ops.readerNonModifying(args[0].name, ctx)}(${(0, writeExpression_1.writeExpression)(resolved[1], ctx)}.begin_parse())`;
            },
        },
    ],
    [
        "fromSlice",
        {
            name: "fromSlice",
            resolve: (ctx, args, ref) => {
                if (args.length !== 2) {
                    (0, errors_1.throwCompilationError)("fromSlice() expects one argument", ref);
                }
                if (args[0].kind !== "ref") {
                    (0, errors_1.throwCompilationError)("fromSlice() is implemented only for struct types", ref);
                }
                const tp = (0, resolveDescriptors_1.getType)(ctx, args[0].name);
                if (tp.kind !== "struct") {
                    (0, errors_1.throwCompilationError)("fromSlice() is implemented only for struct types", ref);
                }
                if (args[1].kind !== "ref" || args[1].name !== "Slice") {
                    (0, errors_1.throwCompilationError)("fromSlice() expects a Slice as an argument", ref);
                }
                return { kind: "ref", name: args[0].name, optional: false };
            },
            generate: (ctx, args, resolved, ref) => {
                if (resolved.length !== 2) {
                    (0, errors_1.throwCompilationError)("fromSlice() expects one argument", ref);
                }
                if (args[0].kind !== "ref") {
                    (0, errors_1.throwCompilationError)("fromSlice() is implemented only for struct types", ref);
                }
                if (args[1].kind !== "ref" || args[1].name !== "Slice") {
                    (0, errors_1.throwCompilationError)("fromSlice() expects a Slice as an argument", ref);
                }
                return `${ops_1.ops.readerNonModifying(args[0].name, ctx)}(${(0, writeExpression_1.writeExpression)(resolved[1], ctx)})`;
            },
        },
    ],
]);

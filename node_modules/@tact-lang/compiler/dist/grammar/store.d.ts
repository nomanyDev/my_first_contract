import { ASTProgram, ASTConstant, ASTFunction, ASTNativeFunction, ASTType } from "./ast";
import { CompilerContext } from "../context";
import { TypeOrigin } from "../types/types";
export type TactSource = {
    code: string;
    path: string;
    origin: TypeOrigin;
};
/**
 * Represents the storage for all AST-related data within the compiler context.
 * @property functions AST entries representing top-level functions.
 * @property constants AST entries representing top-level constant definitions.
 * @property types AST entries representing structures, contracts, and traits.
 */
export type ASTStore = {
    sources: TactSource[];
    funcSources: {
        code: string;
        path: string;
    }[];
    functions: (ASTFunction | ASTNativeFunction)[];
    constants: ASTConstant[];
    types: ASTType[];
};
/**
 * Retrieves the raw AST for the given context.
 * @param ctx The compiler context from which the AST is retrieved.
 * @throws Will throw an error if the AST is not found in the context.
 * @returns The AST types associated with the context.
 */
export declare function getRawAST(ctx: CompilerContext): ASTStore;
/**
 * Parses multiple Tact source files into AST programs.
 */
export declare function parsePrograms(sources: TactSource[]): ASTProgram[];
/**
 * Extends the compiler context by adding AST entries and source information from
 * given sources and parsed programs.
 * @param parsedPrograms An optional array of previously parsed programs. If not defined, they will be parsed from `sources`.
 * @returns The updated compiler context.
 */
export declare function openContext(ctx: CompilerContext, sources: TactSource[], funcSources: {
    code: string;
    path: string;
}[], parsedPrograms?: ASTProgram[]): CompilerContext;

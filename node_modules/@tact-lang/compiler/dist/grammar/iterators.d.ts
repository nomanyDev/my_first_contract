import { ASTNode, ASTStatement, ASTExpression } from "./ast";
/**
 * Recursively iterates over each expression in an ASTNode and applies a callback to each expression.
 * @param node The node to traverse.
 * @param callback The callback function to apply to each expression.
 */
export declare function forEachExpression(node: ASTNode, callback: (expr: ASTExpression) => void): void;
/**
 * Recursively iterates over each expression in an ASTNode and applies a callback to each expression.
 * @param node The node to traverse.
 * @param acc The initial value of the accumulator.
 * @param callback The callback function to apply to each expression.
 * @returns The final value of the accumulator after processing all expressions.
 */
export declare function foldExpressions<T>(node: ASTNode, acc: T, callback: (acc: T, expr: ASTExpression) => T): T;
/**
 * Recursively iterates over each statement in an ASTNode and applies a callback to each statement.
 * @param node The node to traverse.
 * @param callback The callback function to apply to each statement.
 */
export declare function forEachStatement(node: ASTNode, callback: (stmt: ASTStatement) => void): void;
/**
 * Recursively iterates over each statement in an ASTNode and applies a callback to each statement.
 * @param node The node to traverse.
 * @param acc The initial value of the accumulator.
 * @param callback The callback function to apply to each statement, also passes the accumulator.
 * @returns The final value of the accumulator after processing all statements.
 */
export declare function foldStatements<T>(node: ASTNode, acc: T, callback: (acc: T, stmt: ASTStatement) => T): T;

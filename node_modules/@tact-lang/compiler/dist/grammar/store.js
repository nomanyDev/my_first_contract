"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.openContext = exports.parsePrograms = exports.getRawAST = void 0;
const context_1 = require("../context");
const grammar_1 = require("./grammar");
const store = (0, context_1.createContextStore)();
/**
 * Retrieves the raw AST for the given context.
 * @param ctx The compiler context from which the AST is retrieved.
 * @throws Will throw an error if the AST is not found in the context.
 * @returns The AST types associated with the context.
 */
function getRawAST(ctx) {
    const r = store.get(ctx, "types");
    if (!r) {
        throw Error("No AST found in context");
    }
    return r;
}
exports.getRawAST = getRawAST;
/**
 * Parses multiple Tact source files into AST programs.
 */
function parsePrograms(sources) {
    return sources.map((source) => (0, grammar_1.parse)(source.code, source.path, source.origin));
}
exports.parsePrograms = parsePrograms;
/**
 * Extends the compiler context by adding AST entries and source information from
 * given sources and parsed programs.
 * @param parsedPrograms An optional array of previously parsed programs. If not defined, they will be parsed from `sources`.
 * @returns The updated compiler context.
 */
function openContext(ctx, sources, funcSources, parsedPrograms) {
    const programs = parsedPrograms ? parsedPrograms : parsePrograms(sources);
    const types = [];
    const functions = [];
    const constants = [];
    for (const program of programs) {
        for (const entry of program.entries) {
            if (entry.kind === "def_struct" ||
                entry.kind === "def_contract" ||
                entry.kind === "def_trait" ||
                entry.kind === "primitive") {
                types.push(entry);
            }
            else if (entry.kind === "def_function" ||
                entry.kind === "def_native_function") {
                functions.push(entry);
            }
            else if (entry.kind === "def_constant") {
                constants.push(entry);
            }
        }
    }
    ctx = store.set(ctx, "types", {
        sources,
        funcSources,
        functions,
        constants,
        types,
    });
    return ctx;
}
exports.openContext = openContext;
